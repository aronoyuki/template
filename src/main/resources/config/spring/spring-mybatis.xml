<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="maxActive" value="${druid.initialSize}"/>
        <property name="maxIdle" value="${druid.maxIdle}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxOpenPreparedStatements" value="${druid.maxOpenPreparedStatements}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        <property name="logAbandoned" value="${druid.logAbandoned}"/>
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <!-- 1加载db.properties文件中的内容 db.properties文件中命名要有一定的特殊规则易懂 -->
    <!--<context:property-placeholder location="classpath:config/db.properties"/>-->
    <!-- 2配置数据源连接池 jdcporg.apache.commons.dbcp.BasicDataSource -->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>-->

    <!-- 3 配置sqlSessionFactory，并引入数据源 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:config/spring/mybatis-config.xml"/>
    </bean>
    <!-- 4 mapper扫描器 Spring会自动查找其下的类 ,包下的接口类需要使用@MapperScan注解,否则容器注入会失败，在实现层使用@Resource引入就能调用接口中的方法进行操作数据库了，
    但是要求mapper接口中的方法名称和sql.xml中的sqlId名称必须一致-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描包路径如果有多少个包，之间用半角逗号隔开 -->
        <property name="basePackage" value="cn.aptx4869.*.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!-- 事务管理器，对mybatis操作数据库进行事务控制，spring使用jdbc的事务控制类 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--操作数据库肯定要引入数据源dataSource-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--spring 事务注解mode="aspectj"表示采用切面-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 通知映射到上面的事务管理器-->
    <tx:advice id="txAdive" transaction-manager="transactionManager">
        <tx:attributes>
            <!--传播行为 REQUIRED必须事务-->
            <tx:method name="save*" propagation="REQUIRED"></tx:method>
            <tx:method name="delete*" propagation="REQUIRED"></tx:method>
            <tx:method name="insert*" propagation="REQUIRED"></tx:method>
            <tx:method name="update*" propagation="REQUIRED"></tx:method>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"></tx:method>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"></tx:method>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>
    <!--aop切面并配置切入点入进行事物管理 指向上面的映射-->
    <aop:config>
        <aop:pointcut expression="execution(* cn.aptx4869.*.service.impl..*.*(..))" id="transactionPointcut"/>
        <aop:advisor advice-ref="txAdive" pointcut-ref="transactionPointcut"/>
    </aop:config>
</beans>